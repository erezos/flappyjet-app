// Mocks generated by Mockito 5.4.5 from annotations
// in flappy_jet_pro/test/services/railway_leaderboard_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:flappy_jet_pro/game/systems/player_identity_manager.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PlayerIdentityManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlayerIdentityManager extends _i1.Mock
    implements _i2.PlayerIdentityManager {
  MockPlayerIdentityManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get playerName => (super.noSuchMethod(
        Invocation.getter(#playerName),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#playerName),
        ),
      ) as String);

  @override
  String get playerId => (super.noSuchMethod(
        Invocation.getter(#playerId),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#playerId),
        ),
      ) as String);

  @override
  String get deviceId => (super.noSuchMethod(
        Invocation.getter(#deviceId),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#deviceId),
        ),
      ) as String);

  @override
  String get authToken => (super.noSuchMethod(
        Invocation.getter(#authToken),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#authToken),
        ),
      ) as String);

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isFirstTimeUser => (super.noSuchMethod(
        Invocation.getter(#isFirstTimeUser),
        returnValue: false,
      ) as bool);

  @override
  bool get isBackendRegistered => (super.noSuchMethod(
        Invocation.getter(#isBackendRegistered),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markBackendRegistered(
    String? backendPlayerId,
    String? _playerName, [
    String? _authToken,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #markBackendRegistered,
          [
            backendPlayerId,
            _playerName,
            _authToken,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateAuthToken(String? newToken) => (super.noSuchMethod(
        Invocation.method(
          #updateAuthToken,
          [newToken],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updatePlayerName(String? newName) => (super.noSuchMethod(
        Invocation.method(
          #updatePlayerName,
          [newName],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> forceNicknameSyncToBackend() => (super.noSuchMethod(
        Invocation.method(
          #forceNicknameSyncToBackend,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> forceResetToNewPlayer() => (super.noSuchMethod(
        Invocation.method(
          #forceResetToNewPlayer,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
